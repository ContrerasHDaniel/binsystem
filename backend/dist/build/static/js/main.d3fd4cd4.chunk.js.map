{"version":3,"sources":["components/Landing/MaterialService.ts","components/Landing/ContainerService.ts","components/Landing/AlmacenExterno.tsx","components/Landing/AlmacenInterno.tsx","components/Landing/LandingPage.tsx","reportWebVitals.ts","index.tsx"],"names":["getMaterials","a","axios","get","getContainers","setMaterialID","containerID","materialID","patch","useStyles","makeStyles","theme","createStyles","cardEscoria","height","maxHeight","backgroundColor","textEscoria","textAlign","alignItems","fontSize","color","marginTop","cardCuarentena","minHeight","borderStyle","borderColor","textCuarentena","fontWeight","cardContExt","width","minWidth","buttonEmpty","margin","spacing","buttonFull","AlmacenExterno","containers","setOriginMaterialID","setOriginContainerID","originMaterialID","setDestContainerID","handleAlertOpen","handleConfirmDialogOpen","classes","useState","buttonSelected","setButtonSelected","handleSelectDest","handleSelectOrigin","currentButton","Grid","container","item","xs","Card","className","Typography","variant","map","id","MaterialID","Button","onClick","ContainerID","startIcon","cardMobiliario","textMobiliario","textoExterior","cardCharger","AlmacenInterno","root","flexGrow","paper","padding","palette","text","secondary","gridLabel","alignContent","dialogLabel","LandingPage","materials","setMaterials","setContainers","originContainerID","destContainerID","openAlert","setOpenAlert","openConfirmDialog","setOpenConfirmDialog","materialMovedInfo","setMaterialMovedInfo","handleAlertClose","find","material","handleConfirmDialogClose","handleConfirmAction","containerServices","window","location","reload","loadMaterials","materialServices","res","data","loadContainers","useEffect","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","FormLabel","lote","material_type","Paper","filter","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.d3fd4cd4.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const getMaterials = async () => {\n    return await axios.get('http://localhost:4000/materials')\n}","import axios from 'axios'\n\nexport const getContainers = async () => {\n    return await axios.get('http://localhost:4000/containers')\n}\n\nexport const setMaterialID = async(containerID: string, materialID?: number) => {\n    return await axios.patch(`http://localhost:4000/containers/${containerID}`, {'MaterialID': materialID ? materialID: null})\n}","import React, { useState } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\nimport PresentToAllIcon from \"@material-ui/icons/PresentToAll\";\nimport PresentToAllTwoToneIcon from \"@material-ui/icons/PresentToAllTwoTone\";\nimport { Typography } from \"@material-ui/core\";\nimport { Container } from \"./Container\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    cardEscoria: {\n      height: 150,\n      maxHeight: 150,\n      backgroundColor: \"#969696\",\n    },\n    textEscoria: {\n      textAlign: \"center\",\n      alignItems: \"center\",\n      fontSize: 24,\n      color: \"#fff\",\n      marginTop: 30,\n    },\n    cardCuarentena: {\n      height: 50,\n      minHeight: 50,\n      borderStyle: \"dashed\",\n      borderColor: \"red\",\n      alignItems: \"center\",\n      textAlign: \"center\",\n    },\n    textCuarentena: {\n      marginTop: 10,\n      fontWeight: \"bold\",\n    },\n    cardContExt: {\n      width: 180,\n      minWidth: 100,\n      textAlign: \"center\",\n    },\n    buttonEmpty: {\n      margin: theme.spacing(1),\n      width: 150,\n      minWidth: 150,\n      height: 50,\n      minHeight: 50,\n    },\n    buttonFull: {\n      margin: theme.spacing(1),\n      width: 150,\n      minWidth: 150,\n      backgroundColor: \"#e8ce71\",\n      height: 50,\n      minHeight: 50,\n    },\n  })\n);\n\nexport interface Props {\n  containers: Container[];\n  originMaterialID: number;\n  setOriginMaterialID: any;\n  setOriginContainerID: any;\n  setDestContainerID: any;\n  handleAlertOpen: any;\n  handleConfirmDialogOpen: any;\n}\n\nconst AlmacenExterno = ({\n  containers,\n  setOriginMaterialID,\n  setOriginContainerID,\n  originMaterialID,\n  setDestContainerID,\n  handleAlertOpen,\n  handleConfirmDialogOpen\n}: Props) => {\n  const classes = useStyles();\n\n  const [buttonSelected, setButtonSelected] = useState<number>(0);\n\n  const handleSelectDest = async (\n    containerID: string\n  ) => {\n    if (originMaterialID) {\n      setDestContainerID(containerID)\n      handleConfirmDialogOpen()\n    } else {\n      handleAlertOpen()\n    }\n  }\n\n  const handleSelectOrigin = (\n    currentButton: number,\n    materialID: number,\n    containerID: string\n  ) => {\n    if (buttonSelected !== 0) {\n      setOriginMaterialID(0);\n      setOriginContainerID(\"\");\n      setButtonSelected(0);\n    } else {\n      setOriginMaterialID(materialID);\n      setOriginContainerID(containerID);\n      setButtonSelected(currentButton);\n    }\n  };\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={2}>\n        <Grid container spacing={2}>\n          <Grid item xs={12}>\n            <Card className={classes.cardEscoria}>\n              <Typography className={classes.textEscoria}>\n                Almacén de Escoria\n              </Typography>\n            </Card>\n          </Grid>\n          <Grid item xs={12}>\n            <Card className={classes.cardCuarentena} variant=\"outlined\">\n              <Typography className={classes.textCuarentena}>\n                Cuarentena Externa\n              </Typography>\n            </Card>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={10}>\n        <Grid container>\n          {containers.map((container, id = 0) => {\n            id = id + 1;\n            if (!container.MaterialID) {\n              return (\n                <Grid item xs={3} key={container.ContainerID}>\n                  <Button\n                    onClick={()=> handleSelectDest(container.ContainerID)}\n                    variant=\"contained\"\n                    color=\"default\"\n                    className={classes.buttonEmpty}\n                    startIcon={<PresentToAllIcon />}\n                  >\n                    {container.ContainerID}\n                  </Button>\n                </Grid>\n              );\n            } else {\n              return (\n                <Grid item xs={3} key={container.ContainerID}>\n                  <Button\n                    onClick={() =>\n                      handleSelectOrigin(\n                        id,\n                        container.MaterialID,\n                        container.ContainerID\n                      )\n                    }\n                    variant={buttonSelected === id ? \"outlined\" : \"contained\"}\n                    color={buttonSelected === id ? \"primary\" : \"inherit\"}\n                    className={classes.buttonFull}\n                    startIcon={<PresentToAllTwoToneIcon />}\n                  >\n                    {container.ContainerID}\n                  </Button>\n                </Grid>\n              );\n            }\n          })}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default AlmacenExterno;\n","import React, { useState } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport Button from \"@material-ui/core/Button\";\nimport { Typography } from \"@material-ui/core\";\nimport { Container } from \"./Container\";\nimport { PresentToAll, PresentToAllTwoTone } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    cardMobiliario: {\n      backgroundColor: \"#fff\",\n      borderStyle: \"solid\",\n      borderColor: \"black\",\n      height: 60,\n    },\n    textMobiliario: {\n      textAlign: \"center\",\n      fontSize: 18,\n    },\n    textoExterior: {\n      textAlign: \"center\",\n      fontSize: 12,\n    },\n    cardCharger: {\n      fontSize: 12,\n      borderStyle: \"solid\",\n      borderColor: \"black\",\n      height: 50,\n    },\n    buttonEmpty: {\n      margin: theme.spacing(1),\n      width: 150,\n      minWidth: 150,\n      height: 50,\n      minHeight: 50,\n    },\n    buttonFull: {\n      margin: theme.spacing(1),\n      width: 150,\n      minWidth: 150,\n      backgroundColor: \"#e8ce71\",\n      height: 50,\n      minHeight: 50,\n    },\n  })\n);\n\nexport interface Props {\n  containers: Container[];\n  originMaterialID: number;\n  setOriginMaterialID: any;\n  setOriginContainerID: any;\n  setDestContainerID: any;\n  handleAlertOpen: any;\n  handleConfirmDialogOpen: any;\n}\n\nconst AlmacenInterno = ({\n  containers,\n  setOriginMaterialID,\n  setOriginContainerID,\n  originMaterialID,\n  setDestContainerID,\n  handleAlertOpen,\n  handleConfirmDialogOpen\n}: Props) => {\n  const classes = useStyles();\n\n  const [buttonSelected, setButtonSelected] = useState<number>(0);\n\n  const handleSelectDest = async (\n    containerID: string\n  ) => {\n    if (originMaterialID) {\n      setDestContainerID(containerID)\n      handleConfirmDialogOpen()\n    } else {\n      handleAlertOpen()\n    }\n  }\n\n  const handleSelectOrigin = (\n    currentButton: number,\n    materialID: number,\n    containerID: string\n  ) => {\n    if (buttonSelected !== 0) {\n      setOriginMaterialID(0);\n      setOriginContainerID(\"\");\n      setButtonSelected(0);\n    } else {\n      setOriginContainerID(containerID);\n      setOriginMaterialID(materialID);\n      setButtonSelected(currentButton);\n    }\n  };\n\n  return (\n    <Grid container spacing={3}>\n      <Grid item xs={3}>\n        <Grid container spacing={3}>\n          <Grid item xs={6}></Grid>\n          <Grid item xs={6}>\n            <Card className={classes.cardMobiliario}>\n              <Typography className={classes.textMobiliario}>SW 1</Typography>\n            </Card>\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item xs={8}>\n            <Typography className={classes.textoExterior}>\n              Shipping Area\n            </Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Card className={classes.cardCharger}>\n              <Typography className={classes.textoExterior}>Charger</Typography>\n            </Card>\n          </Grid>\n        </Grid>\n        <Grid container spacing={3}>\n          <Grid item xs={6}></Grid>\n          <Grid item xs={6}>\n            <Card className={classes.cardMobiliario}>\n              <Typography className={classes.textMobiliario}>HF</Typography>\n            </Card>\n          </Grid>\n        </Grid>\n        <Grid container spacing={3}>\n          <Grid item xs={6}>\n            <Typography className={classes.textoExterior}>\n              External Lodles Pre-Hatcher\n            </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <Card className={classes.cardMobiliario}>\n              <Typography className={classes.textMobiliario}>SW 2</Typography>\n            </Card>\n          </Grid>\n        </Grid>\n        <Grid container spacing={1}>\n          <Grid item xs={8}></Grid>\n          <Grid item xs={4}>\n            <Card className={classes.cardCharger}>\n              <Typography className={classes.textoExterior}>Charger</Typography>\n            </Card>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item xs={9}>\n        <Grid container spacing={1}>\n          <Grid item xs={2}>\n            <Card className={classes.cardMobiliario}>\n              <Typography className={classes.textoExterior}>\n                Dross Cooler\n              </Typography>\n            </Card>\n          </Grid>\n          <Grid item xs={2}>\n            <Card className={classes.cardMobiliario}>\n              <Typography className={classes.textoExterior}>\n                Rotory Furnace 1\n              </Typography>\n            </Card>\n          </Grid>\n          <Grid item xs={2}>\n            <Card className={classes.cardMobiliario}>\n              <Typography className={classes.textoExterior}>\n                Rotory Furnace 2\n              </Typography>\n            </Card>\n          </Grid>\n          {containers.map((container, id = 0) => {\n            id = id + 1;\n            if (!container.MaterialID) {\n              return (\n                <Grid item xs={3} key={container.ContainerID}>\n                  <Button\n                    onClick={()=> handleSelectDest(container.ContainerID)}\n                    variant=\"contained\"\n                    color=\"default\"\n                    className={classes.buttonEmpty}\n                    startIcon={<PresentToAll></PresentToAll>}\n                  >\n                    {container.ContainerID}\n                  </Button>\n                </Grid>\n              );\n            } else {\n              return (\n                <Grid item xs={2} key={container.ContainerID}>\n                  <Button\n                    onClick={() =>\n                      handleSelectOrigin(\n                        id,\n                        container.MaterialID,\n                        container.ContainerID\n                      )\n                    }\n                    variant={buttonSelected === id ? \"outlined\" : \"contained\"}\n                    color={buttonSelected === id ? \"primary\" : \"inherit\"}\n                    className={classes.buttonFull}\n                    startIcon={<PresentToAllTwoTone></PresentToAllTwoTone>}\n                  >\n                    {container.ContainerID}\n                  </Button>\n                </Grid>\n              );\n            }\n          })}\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default AlmacenInterno;\n","import React, { useEffect, useState } from 'react'\nimport { Material } from './Material'\nimport { Container } from './Container'\nimport * as materialServices from './MaterialService'\nimport * as containerServices from './ContainerService'\nimport  AlmacenExterno from './AlmacenExterno'\nimport  AlmacenInterno from './AlmacenInterno'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Paper from '@material-ui/core/Paper'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n    gridLabel: {\n        alignContent: 'center',\n        alignItems: 'center',\n        textAlign: 'center'\n    },\n    dialogLabel: {\n        textAlign: 'center',\n        color: 'black',\n        fontSize: 18,\n        fontWeight: 700,\n    },\n}))\n\nconst LandingPage = () => {\n    const classes = useStyles()\n    const [materials, setMaterials] = useState<Material[]>([])\n    const [containers, setContainers] = useState<Container[]>([])\n    const [originContainerID, setOriginContainerID] = useState<string>('')\n    const [originMaterialID, setOriginMaterialID] = useState<number>(0)\n    const [destContainerID, setDestContainerID] = useState<string>('')\n    const [openAlert, setOpenAlert] = useState(false)\n    const [openConfirmDialog, setOpenConfirmDialog] = useState(false)\n    const [materialMovedInfo, setMaterialMovedInfo] = useState<Material>()\n\n    const handleAlertOpen = () => {\n      setOpenAlert(true)\n    }\n  \n    const handleAlertClose = () => {\n      setOpenAlert(false)\n    }\n\n    const handleConfirmDialogOpen = () => {\n        setMaterialMovedInfo(materials.find(material => material.MaterialID === originMaterialID))\n        setOpenConfirmDialog(true)\n    }\n\n    const handleConfirmDialogClose = () => {\n        setOpenConfirmDialog(false)        \n    }\n\n    const handleConfirmAction = async() => {\n        await containerServices.setMaterialID(destContainerID, originMaterialID);\n        await containerServices.setMaterialID(originContainerID)\n        handleConfirmDialogClose()\n        window.location.reload(false)\n    }\n    \n    const loadMaterials = async () => {\n        const res = await materialServices.getMaterials()\n        setMaterials(res.data)\n    }\n\n    const loadContainers = async () => {\n        const res = await containerServices.getContainers()\n        setContainers(res.data)\n    }\n\n    useEffect(() => {\n        loadMaterials()\n        loadContainers()\n    }, [])\n    \n    return (\n        <div className={classes.root}>\n            <Dialog\n                open={openAlert}\n                onClose={handleAlertClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"Seleccione un origen primero\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        Primero debe seleccionar un contenedor de origen que tenga material\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAlertClose} color=\"default\">\n                        Entendido\n                    </Button>\n                </DialogActions>\n            </Dialog>\n\n            <Dialog\n                open={openConfirmDialog}\n                onClose={handleConfirmDialogClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogTitle id=\"alert-dialog-title\">{\"¿Está seguro de mover el bin seleccionado?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        <Grid container spacing={3} className={classes.gridLabel}>\n                            <Grid item xs={12}>\n                                <Grid container spacing={3}>\n                                    <Grid item xs={6}>\n                                        <FormLabel className={classes.dialogLabel}>Bin Origen: </FormLabel>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                    <FormLabel className={classes.dialogLabel}>{originContainerID}</FormLabel>\n                                    </Grid>\n                                </Grid>\n                                <Grid container spacing={3}>\n                                    <Grid item xs={6}>\n                                        <FormLabel className={classes.dialogLabel}>Bin Destino: </FormLabel>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                    <FormLabel className={classes.dialogLabel}>{destContainerID}</FormLabel>\n                                    </Grid>\n                                </Grid>\n                                <Grid container spacing={3}>\n                                    <Grid item xs={6}>\n                                        <FormLabel className={classes.dialogLabel}>Lote: </FormLabel>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                    <FormLabel className={classes.dialogLabel}>{materialMovedInfo?.lote}</FormLabel>\n                                    </Grid>\n                                </Grid>\n                                <Grid container spacing={3}>\n                                    <Grid item xs={6}>\n                                        <FormLabel className={classes.dialogLabel}>Material: </FormLabel>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                    <FormLabel className={classes.dialogLabel}>{materialMovedInfo?.material_type}</FormLabel>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleConfirmAction} color=\"primary\">\n                        Continuar\n                    </Button>\n                    <Button onClick={handleConfirmDialogClose} color=\"secondary\">\n                        Cancelar\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Grid container spacing={2}>\n                <Grid item xs={6}>\n                    <Paper className={classes.paper}> Almacen interno </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                    <Paper className={classes.paper}> Almacen externo </Paper>\n                </Grid>\n                <Grid item xs={6}>\n                    <AlmacenInterno\n                        originMaterialID = {originMaterialID}\n                        handleConfirmDialogOpen = {handleConfirmDialogOpen}\n                        handleAlertOpen = {handleAlertOpen}\n                        setOriginContainerID = {setOriginContainerID}\n                        setOriginMaterialID = {setOriginMaterialID}\n                        setDestContainerID = {setDestContainerID}\n                        containers={containers.filter(container => container.ContainerID.includes('B'))}></AlmacenInterno>\n                </Grid>\n                <Grid item xs={6}>\n                    <AlmacenExterno \n                        originMaterialID = {originMaterialID}\n                        handleConfirmDialogOpen = {handleConfirmDialogOpen}\n                        handleAlertOpen = {handleAlertOpen}\n                        setOriginContainerID = {setOriginContainerID}\n                        setOriginMaterialID = {setOriginMaterialID}\n                        setDestContainerID = {setDestContainerID}\n                        containers={containers.filter(container => container.ContainerID.includes('A'))}\n                        ></AlmacenExterno>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default LandingPage\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport LandingPage from './components/Landing/LandingPage';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" component={LandingPage}/>\n      </Switch>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}